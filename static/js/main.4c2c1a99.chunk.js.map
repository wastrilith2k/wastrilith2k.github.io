{"version":3,"sources":["Constants.js","Dungeon.js","App.js","reportWebVitals.js","index.js"],"names":["typeMap","dungeonHeight","Math","floor","window","innerHeight","dungeonWidth","innerWidth","types","Direction","N","x","y","S","E","W","colors","console","log","dungeon","workableHeight","workableWidth","regionIdx","setCell","type","Array","isArray","setCellType","createRegion","init","randomInt","max","random","createRoom","props","maxWidth","maxHeight","width","height","top","left","isRoomFree","addCorridors","createCorridor","canTunnel","cellPos","shiftCell","dir","cells","push","directions","Object","keys","lastDir","length","cell","freeCells","forEach","testVec","testVec2","map","c","includes","newCell","newCell2","pop","addAdjacentRegionsToCell","validTypes","regions","reduce","regs","testPos","potentialConnection","baseCell","surroundingTypeCount","adjacentTypeCount","cellToCheck","undefined","fillInDeadends","iterations","allPossibleFillsDone","fillCount","addConnections","availableConnections","regionMap","openRegions","i","maxIterations","connection","mappedRegions","r","dest","sources","filter","_","idx","hasAdjacentConnection","reg","App","roomAttempts","createDungeon","id","col","colIdx","row","rowIdx","styles","backgroundColor","className","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c2c1a99.chunk.js","sourcesContent":["export const scale = 8;\nexport const typeMap = ['wall', 'corridor', 'room', 'connection', 'door'];\nexport const dungeonHeight = Math.floor((Math.floor(window.innerHeight / 2) * 2) / scale) //132;\nexport const dungeonWidth = Math.floor((Math.floor(window.innerWidth / 2) * 2) / scale)//230;\nexport const defaultRoomAttempts = 1400;\nexport const oneInXChanceOfExtraDoor = 50;\nexport const maxFillInPasses = 30;\nexport const fillInPercentage = 75;\nexport const corridorTurnChance = 20;\nexport const types = {\n  WALL: 0,\n  CORRIDOR: 1,\n  ROOM: 2,\n  CONNECTION: 3,\n  DOOR: 4\n};\nexport const Direction = {\n  N: {\n    x: 0,\n    y: -1\n  },\n  S: {\n    x: 0,\n    y: 1\n  },\n  E: {\n    x: 1,\n    y: 0\n  },\n  W: {\n    x: -1,\n    y: 0\n  }\n};\nexport const colors = [\n  \"#63b598\", \"#ce7d78\", \"#ea9e70\", \"#a48a9e\", \"#c6e1e8\", \"#648177\" ,\"#0d5ac1\" ,\n  \"#f205e6\" ,\"#1c0365\" ,\"#14a9ad\" ,\"#4ca2f9\" ,\"#a4e43f\" ,\"#d298e2\" ,\"#6119d0\",\n  \"#d2737d\" ,\"#c0a43c\" ,\"#f2510e\" ,\"#651be6\" ,\"#79806e\" ,\"#61da5e\" ,\"#cd2f00\" ,\n  \"#9348af\" ,\"#01ac53\" ,\"#c5a4fb\" ,\"#996635\",\"#b11573\" ,\"#4bb473\" ,\"#75d89e\" ,\n  \"#2f3f94\" ,\"#2f7b99\" ,\"#da967d\" ,\"#34891f\" ,\"#b0d87b\" ,\"#ca4751\" ,\"#7e50a8\" ,\n  \"#c4d647\" ,\"#e0eeb8\" ,\"#11dec1\" ,\"#289812\" ,\"#566ca0\" ,\"#ffdbe1\" ,\"#2f1179\" ,\n  \"#935b6d\" ,\"#916988\" ,\"#513d98\" ,\"#aead3a\", \"#9e6d71\", \"#4b5bdc\", \"#0cd36d\",\n  \"#250662\", \"#cb5bea\", \"#228916\", \"#ac3e1b\", \"#df514a\", \"#539397\", \"#880977\",\n  \"#f697c1\", \"#ba96ce\", \"#679c9d\", \"#c6c42c\", \"#5d2c52\", \"#48b41b\", \"#e1cf3b\",\n  \"#5be4f0\", \"#57c4d8\", \"#a4d17a\", \"#225b8\", \"#be608b\", \"#96b00c\", \"#088baf\",\n  \"#f158bf\", \"#e145ba\", \"#ee91e3\", \"#05d371\", \"#5426e0\", \"#4834d0\", \"#802234\",\n  \"#6749e8\", \"#0971f0\", \"#8fb413\", \"#b2b4f0\", \"#c3c89d\", \"#c9a941\", \"#41d158\",\n  \"#fb21a3\", \"#51aed9\", \"#5bb32d\", \"#807fb\", \"#21538e\", \"#89d534\", \"#d36647\",\n  \"#7fb411\", \"#0023b8\", \"#3b8c2a\", \"#986b53\", \"#f50422\", \"#983f7a\", \"#ea24a3\",\n  \"#79352c\", \"#521250\", \"#c79ed2\", \"#d6dd92\", \"#e33e52\", \"#b2be57\", \"#fa06ec\",\n  \"#1bb699\", \"#6b2e5f\", \"#64820f\", \"#1c271\", \"#21538e\", \"#89d534\", \"#d36647\",\n  \"#7fb411\", \"#0023b8\", \"#3b8c2a\", \"#986b53\", \"#f50422\", \"#983f7a\", \"#ea24a3\",\n  \"#79352c\", \"#521250\", \"#c79ed2\", \"#d6dd92\", \"#e33e52\", \"#b2be57\", \"#fa06ec\",\n  \"#1bb699\", \"#6b2e5f\", \"#64820f\", \"#1c271\", \"#9cb64a\", \"#996c48\", \"#9ab9b7\",\n  \"#06e052\", \"#e3a481\", \"#0eb621\", \"#fc458e\", \"#b2db15\", \"#aa226d\", \"#792ed8\",\n  \"#73872a\", \"#520d3a\", \"#cefcb8\", \"#a5b3d9\", \"#7d1d85\", \"#c4fd57\", \"#f1ae16\",\n  \"#8fe22a\", \"#ef6e3c\", \"#243eeb\", \"#1dc18\", \"#dd93fd\", \"#3f8473\", \"#e7dbce\",\n  \"#421f79\", \"#7a3d93\", \"#635f6d\", \"#93f2d7\", \"#9b5c2a\", \"#15b9ee\", \"#0f5997\",\n  \"#409188\", \"#911e20\", \"#1350ce\", \"#10e5b1\", \"#fff4d7\", \"#cb2582\", \"#ce00be\",\n  \"#32d5d6\", \"#17232\", \"#608572\", \"#c79bc2\", \"#00f87c\", \"#77772a\", \"#6995ba\",\n  \"#fc6b57\", \"#f07815\", \"#8fd883\", \"#060e27\", \"#96e591\", \"#21d52e\", \"#d00043\",\n  \"#b47162\", \"#1ec227\", \"#4f0f6f\", \"#1d1d58\", \"#947002\", \"#bde052\", \"#e08c56\",\n  \"#28fcfd\", \"#bb09b\", \"#36486a\", \"#d02e29\", \"#1ae6db\", \"#3e464c\", \"#a84a8f\",\n  \"#911e7e\", \"#3f16d9\", \"#0f525f\", \"#ac7c0a\", \"#b4c086\", \"#c9d730\", \"#30cc49\",\n  \"#3d6751\", \"#fb4c03\", \"#640fc1\", \"#62c03e\", \"#d3493a\", \"#88aa0b\", \"#406df9\",\n  \"#615af0\", \"#4be47\", \"#2a3434\", \"#4a543f\", \"#79bca0\", \"#a8b8d4\", \"#00efd4\",\n  \"#7ad236\", \"#7260d8\", \"#1deaa7\", \"#06f43a\", \"#823c59\", \"#e3d94c\", \"#dc1c06\",\n  \"#f53b2a\", \"#b46238\", \"#2dfff6\", \"#a82b89\", \"#1a8011\", \"#436a9f\", \"#1a806a\",\n  \"#4cf09d\", \"#c188a2\", \"#67eb4b\", \"#b308d3\", \"#fc7e41\", \"#af3101\", \"#ff065\",\n  \"#71b1f4\", \"#a2f8a5\", \"#e23dd0\", \"#d3486d\", \"#00f7f9\", \"#474893\", \"#3cec35\",\n  \"#1c65cb\", \"#5d1d0c\", \"#2d7d2a\", \"#ff3420\", \"#5cdd87\", \"#a259a4\", \"#e4ac44\",\n  \"#1bede6\", \"#8798a4\", \"#d7790f\", \"#b2c24f\", \"#de73c2\", \"#d70a9c\", \"#25b67\",\n  \"#88e9b8\", \"#c2b0e2\", \"#86e98f\", \"#ae90e2\", \"#1a806b\", \"#436a9e\", \"#0ec0ff\",\n  \"#f812b3\", \"#b17fc9\", \"#8d6c2f\", \"#d3277a\", \"#2ca1ae\", \"#9685eb\", \"#8a96c6\",\n  \"#dba2e6\", \"#76fc1b\", \"#608fa4\", \"#20f6ba\", \"#07d7f6\", \"#dce77a\", \"#77ecca\"];","import {\n  defaultRoomAttempts,\n  corridorTurnChance,\n  types,\n  dungeonWidth,\n  dungeonHeight,\n  Direction,\n  oneInXChanceOfExtraDoor,\n  maxFillInPasses,\n  fillInPercentage,\n} from \"./Constants\";\n\nconsole.log(dungeonHeight);\nconsole.log(dungeonWidth);\nconst dungeon = [];\nconst workableHeight = dungeonHeight - 1;\nconst workableWidth = dungeonWidth - 1;\n// eslint-disable-next-line no-unused-vars\nconst extraConnectorChance = 50;\nlet regionIdx = 0; // An index of 0 in the array screws things up\n\nconst setCell = (x, y, type) => {\n  if (!Array.isArray(dungeon[x])) dungeon[x] = [];\n  dungeon[x][y] = {\n    type,\n    regionIdx,\n  };\n};\n\nconst setCellType = (x, y, type) => {\n  dungeon[x][y].type = type;\n};\nconst createRegion = () => {\n  regionIdx = regionIdx + 1;\n};\n\nconst init = () => {\n  for (let x = 0; x <= dungeonWidth; x++) {\n    dungeon[x] = [];\n    for (let y = 0; y <= dungeonHeight; y++) {\n      setCell(x, y, types.WALL);\n    }\n  }\n};\n\nconst randomInt = (max) => {\n  return Math.floor(Math.random() * Math.floor(max)) + 1;\n};\n\nconst isRoomFree = (top, left, height, width) => {\n  for (let x = left - 1; x <= left + width + 1; x++) {\n    for (let y = top - 1; y <= top + height + 1; y++) {\n      if (dungeon[x][y][\"type\"] !== types.WALL) return false;\n    }\n  }\n  return true;\n};\n\nconst createRoom = (props) => {\n  const { maxWidth = 3, maxHeight = 3 } = props;\n  const width = randomInt(maxWidth) * 2 + 1;\n  const height = randomInt(maxHeight) * 2 + 1;\n  const top = randomInt((workableHeight - height) / 2) * 2 - 1;\n  const left = randomInt((workableWidth - width) / 2) * 2 - 1;\n\n  const save = isRoomFree(top, left, height, width);\n\n  if (save) {\n    createRegion();\n    for (let x = left; x < left + width; x++) {\n      for (let y = top; y < top + height; y++) {\n        setCell(x, y, types.ROOM);\n      }\n    }\n  }\n};\n\nconst addCorridors = () => {\n  // Loop until all valid areas are available starting in a corner\n  for (let x = 1; x < dungeonWidth; x += 2) {\n    for (let y = 1; y < dungeonHeight; y += 2) {\n      // If open, start a corridor\n      if (dungeon[x][y].type === types.WALL) createCorridor(x, y);\n    }\n  }\n};\n\nconst canTunnel = (cellPos) => {\n  if (\n    cellPos.x > workableWidth ||\n    cellPos.y > workableHeight ||\n    cellPos.x < 1 ||\n    cellPos.y < 1\n  )\n    return false;\n  if (dungeon[cellPos.x][cellPos.y][\"type\"] === types.WALL) return true;\n  return false;\n};\n\nconst shiftCell = ({ x, y, dir }) => ({\n  x: x + Direction[dir].x,\n  y: y + Direction[dir].y,\n});\n\nconst createCorridor = (x, y) => {\n  const cells = [];\n  cells.push({ x, y });\n  createRegion();\n  setCell(x, y, types.CORRIDOR);\n  const directions = Object.keys(Direction);\n\n  let lastDir = directions[randomInt(directions.length - 1)];\n\n  while (cells.length > 0) {\n    const cell = cells[cells.length - 1];\n    const freeCells = [];\n\n    directions.forEach((dir) => {\n      const testVec = shiftCell({ x: cell.x, y: cell.y, dir });\n      const testVec2 = shiftCell({ x: testVec.x, y: testVec.y, dir });\n      if (canTunnel(testVec) && canTunnel(testVec2)) freeCells.push(dir);\n    });\n\n    let dir;\n\n    if (freeCells.length > 0) {\n      if (\n        freeCells.map((c) => c.dir).includes(lastDir) &&\n        randomInt(100) > corridorTurnChance\n      ) {\n        dir = lastDir;\n      } else {\n        dir = freeCells[randomInt(freeCells.length) - 1];\n      }\n\n      const newCell = shiftCell({ x: cell.x, y: cell.y, dir });\n      setCell(newCell.x, newCell.y, types.CORRIDOR);\n      const newCell2 = shiftCell({ x: newCell.x, y: newCell.y, dir });\n      setCell(newCell2.x, newCell2.y, types.CORRIDOR);\n      cells.push({ x: newCell2.x, y: newCell2.y });\n\n      lastDir = dir;\n    } else {\n      cells.pop();\n      lastDir = null;\n    }\n  }\n};\n\n// eslint-disable-next-line no-unused-vars\nconst oneIn = (range) => randomInt(range) === 1;\n\nconst addAdjacentRegionsToCell = ({ x, y }) => {\n  const validTypes = [types.ROOM, types.CORRIDOR];\n  const regions = Object.keys(Direction).reduce((regs, dir) => {\n    const testPos = shiftCell({ x, y, dir });\n    const potentialConnection = dungeon[testPos.x][testPos.y];\n    if (\n      validTypes.includes(potentialConnection.type) &&\n      !regs.includes(potentialConnection.regionIdx)\n    )\n      regs.push(potentialConnection.regionIdx);\n    return regs;\n  }, []);\n  const baseCell = dungeon[x][y];\n  return { ...baseCell, x, y, regions };\n};\n\nconst hasAdjacentConnection = (x, y) => {\n  const adjacentConnections = surroundingTypeCount(x, y, types.DOOR);\n  return !(adjacentConnections === 0);\n};\n\nconst surroundingTypeCount = (x, y, type) => {\n  let adjacentTypeCount = 0;\n  Object.keys(Direction).forEach((dir) => {\n    const cellToCheck = shiftCell({ x, y, dir });\n    if (dungeon[cellToCheck.x][cellToCheck.y].type !== undefined) {\n      cellToCheck.type = dungeon[cellToCheck.x][cellToCheck.y][\"type\"];\n    }\n    if (cellToCheck.type === type) {\n      adjacentTypeCount = adjacentTypeCount + 1;\n    }\n  });\n  return adjacentTypeCount;\n};\n\nconst fillInDeadends = () => {\n  let iterations = 0;\n  let allPossibleFillsDone = false;\n  while (iterations < maxFillInPasses && allPossibleFillsDone === false) {\n    let fillCount = 0;\n    iterations = iterations + 1;\n    for (let x = 0; x <= dungeonWidth; x++) {\n      for (let y = 0; y <= dungeonHeight; y++) {\n        if (dungeon[x][y].type === types.CORRIDOR) {\n          if (surroundingTypeCount(x, y, types.WALL) === 3) {\n            if (randomInt(100) <= fillInPercentage) {\n              fillCount = fillCount + 1;\n              dungeon[x][y].type = types.WALL;\n            }\n          }\n        }\n      }\n    }\n    if (fillCount === 0) allPossibleFillsDone = true;\n  }\n  console.log(`Done filling in dead ends in ${iterations} iterations.`);\n};\n\nconst addConnections = () => {\n  let availableConnections = [];\n  for (let x = 1; x < dungeonWidth; x++) {\n    for (let y = 1; y < dungeonHeight; y++) {\n      if (dungeon[x][y].type === types.WALL) {\n        const potentialConnection = addAdjacentRegionsToCell({ x, y });\n        if (potentialConnection.regions.length >= 2) {\n          setCellType(x, y, types.CONNECTION);\n          availableConnections.push(potentialConnection);\n        }\n      }\n    }\n  }\n\n  const regionMap = [];\n  let openRegions = [];\n  console.log(regionIdx);\n  for (let i = 1; i <= regionIdx; i++) {\n    regionMap[i] = i;\n    openRegions.push(i);\n  }\n\n  let iterations = 0;\n  const maxIterations = openRegions.length * 2;\n\n  while (openRegions.length > 1 && iterations < maxIterations) {\n    iterations++;\n    // Pick a random connector\n    const connection =\n      availableConnections[randomInt(availableConnections.length) - 1];\n    if (connection === undefined) continue;\n    // Set the random connector to a door\n    setCellType(connection.x, connection.y, types.DOOR);\n    // Find mapped regions for the connected regions of the current connector cell\n    const mappedRegions = connection.regions.map((r) => regionMap[r]);\n    // Get the region for the connector\n    const dest = mappedRegions[0];\n    // Get all other regions listed in this connection\n    const sources = mappedRegions.filter((_, idx) => idx > 0);\n    // Map the other regions on the connection and map them to the destination region\n    for (let i = 1; i <= regionIdx; i++) {\n      if (sources.includes(regionMap[i])) {\n        regionMap[i] = dest;\n      }\n    }\n    // Remove the sources from the list of open regions as they no longer \"exist\"\n    // as they are part of the destination region now\n    openRegions = openRegions.filter((r) => !sources.includes(r));\n\n    // Remove connections that aren't needed\n    availableConnections = availableConnections.filter((cell) => {\n      // Remove current connection\n      if (cell.x === connection.x && cell.y === connection.y) return false;\n\n      // Don't allow connectors right next to each other.\n      if (hasAdjacentConnection(cell.x, cell.y)) {\n        setCellType(cell.x, cell.y, types.WALL);\n        return false;\n      }\n\n      // See how many regions this still spans\n      const connectedRegions = cell.regions.reduce((regs, reg) => {\n        if (!regs.includes(regionMap[reg])) regs.push(regionMap[reg]);\n        return regs;\n      }, []);\n\n      // If this cell connects to more than one mapped region,\n      if (connectedRegions.length > 1) return true;\n\n      setCellType(cell.x, cell.y, types.WALL);\n\n      // Add the occasional extra door to a room\n      if (oneIn(oneInXChanceOfExtraDoor)) setCell(cell.x, cell.y, types.DOOR);\n\n      return false;\n    });\n  }\n  if (iterations >= maxIterations) console.log(\"Max iterations reached\");\n  console.log(`Completed in ${iterations} iterations.`);\n\n  // Remap regions\n  for (let x = 0; x <= dungeonWidth; x++) {\n    for (let y = 0; y <= dungeonHeight; y++) {\n      dungeon[x][y].regionIdx = regionMap[dungeon[x][y].regionIdx];\n    }\n  }\n};\n\nexport const createDungeon = (props = {}) => {\n  init();\n\n  const { roomAttempts = defaultRoomAttempts } = props;\n  for (let i = 0; i < roomAttempts; i++) {\n    createRoom({});\n  }\n\n  addCorridors();\n\n  addConnections();\n\n  fillInDeadends();\n\n  return dungeon;\n};\n","import \"./App.css\";\nimport { createDungeon } from \"./Dungeon\";\nimport { typeMap, scale, colors, types } from \"./Constants\";\nfunction App() {\n  const dungeon = createDungeon();\n\n  const validTypes = [types.CORRIDOR, types.ROOM];\n\n  return (\n    <div id=\"dungeon\">\n      {dungeon.map((col, colIdx) => {\n        return col.map((row, rowIdx) => {\n          const styles = {\n            top: `${rowIdx * scale}px`,\n            left: `${colIdx * scale}px`,\n            width: `${scale}px`,\n            height: `${scale}px`,\n          };\n          if (validTypes.includes(row.type))\n            styles.backgroundColor = colors[row.regionIdx];\n          return (\n            <div\n              className={`cell ${typeMap[row.type]}`}\n              style={styles}\n              key={`cell-${colIdx}-${rowIdx}`}\n            />\n          );\n        });\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}